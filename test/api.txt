block,
no-block,
timeout

TASK:
+	int task_create(func fn, void *args, uint prio, uint stack, char *name);
+	void task_yield();
+	void task_exit(int ret);
+	int task_kill(uint id);
+	void task_sleep(uint ticks);
	int task_wakeup(uint id);
	void task_block(task_queue_t *q, uint stat);
	int task_release(task_queue_t *q);
	void task_release_all(task_queue_t *q);
+	int task_get_id();
+	int task_get_name(uint id, char *name);
+	int task_get_status(uint id);
+	int task_get_prio(uint id);
+	int task_set_prio(uint p);
+	int task_suspend(uint id);
+	int task_resume(uint id);
+	int task_joint(uint id);	

SEM:
	int sem_init(sem_t *s, int val);
	int sem_take(sem_t *s);
	int sem_give(sem_t *s);

MUTEX:
	int mutex_init(mutex_t *m);
	int mutex_lock(mutex_t *m);
	int mutex_unlock(mutex_t *m);

COND:
	int cond_init(cond_t *c);
	int cond_wait(cond_t *c, mutex_t *m);
	int cond_signal(cond_t *c, int broadcast);

FLAGS:
	int flags_init(int id);
	int flags_get(int id);
	int flags_clr(int id); // ?
	int flags_set(int id, int f);
	int flags_wait(int id, int f, int type);

MBOX:
	int mbox_init(int id);
	int mbox_send(int id, msg_t *m, int prio);
	int mbox_recv(int id, msg_t *m);

TIMERS:
	int timer_init(func fn, char *name);
	int timer_start(int id, int begin, int period);
	int timer_stop(int id);
	int timer_delete(int id);
	int timer_getid(char *name);

RINGBUF:
	void ringbuf_init(ringbuf_t *rb, char *buf, int size);
	int ringbuf_send(ringbuf_t *rb, char *data, int size);
	int ringbuf_recv(ringbuf_t *rb, char data, int size);
	int ringbuf_full(ringbuf_t *rb);
	int ringbuf_empty(ringbuf_t *rb);

MEM_HEAP:
	mem_init
	mem_alloc
	mem_calloc
	mem_free

MEM_POOL:
+	mpool_init
+	mpool_alloc

LIST:
+	void list_init(list_t *l);
+	void list_pushF(list_t *l, node_t *n);
+	void list_pushL(list_t *l, node_t *n);
+	node_t *n list_popF(list_t *l);
+	node_t *n list_popL(list_t *l);
+	node_t *n list_peekF(list_t *l);
+	node_t *n list_peekL(list_t *l);
+	void list_remove(list_t *l, node_t *n);
+	int list_count(list_t *l);

TIME:
+	time_get_ticks();
+	time_delayus(int us);
