TASK:
+	int task_create(func fn, void *args, uint prio, uint stack, char *name);
+	void task_yield();
+	void task_exit(int ret);
+	int task_kill(uint id);
+	void task_sleep(uint ticks);
+	int task_wakeup(uint id);
+	void task_block(task_queue_t *q, uint stat);
+	int task_release(task_queue_t *q);
+	void task_release_all(task_queue_t *q);
+	int task_get_id();
+	int task_get_name(uint id, char *name);
+	int task_get_status(uint id);
+	int task_get_prio(uint id);
+	int task_set_prio(uint p);
+	int task_suspend(uint id);
+	int task_resume(uint id);
+	int task_join(uint id);	

SEM:
+	int sem_init(uint id, uint val);
+	int sem_take(uint id);
+	int sem_give(uint id);
+	int sem_try(uint id);

MONITOR:
+	int mux_init(uint id);
+	int mux_lock(uint id);
+	int mux_unlock(uint id);
+	int mux_trylock(uint id);
	int cond_init(cond_t *c);
	int cond_wait(cond_t *c, mutex_t *m);
	int cond_signal(cond_t *c);
	int cond_broadcast(cond_t *c);

FLAGS:
+	int event_init(uint id);
+	int event_set(uint id, uint f);
+	int event_wait_all(uint id, uint f);
+	int event_wait_any(uint id, uint f);

MBOX:
+	int mbox_init(uint id);
+	int mbox_send(uint id, void *msg);
+	int mbox_recv(uint id, void *msg);
+	int mbox_try_send(uint id, void *msg);
+	int mbox_try_recv(uint id, void *msg);

TIMERS:
	int timer_init(uint id, func fn, char *name);
	int timer_start(uint id, int begin, int period);
	int timer_stop(uint id);
	int timer_getstatus(uint id);
	int timer_getid(char *name);

MEM_POOL:
+	mpool_init
+	mpool_alloc

LIST:
+	void list_init(list_t *l);
+	void list_pushF(list_t *l, node_t *n);
+	void list_pushL(list_t *l, node_t *n);
+	node_t *n list_popF(list_t *l);
+	node_t *n list_popL(list_t *l);
+	node_t *n list_peekF(list_t *l);
+	node_t *n list_peekL(list_t *l);
+	void list_remove(list_t *l, node_t *n);
+	int list_count(list_t *l);

TIME:
+	time_get_ticks();
+	time_delayus(int us);

